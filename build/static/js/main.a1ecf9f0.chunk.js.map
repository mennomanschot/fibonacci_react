{"version":3,"sources":["components/Cell/Cell.module.scss","favicon.ico","App.js","hocs/Aux/Aux.js","components/Cell/Cell.js","index.js"],"names":["module","exports","aux","props","children","Cell","this","changed","cellClass","push","classes","styleUpdated","reset","cell","assignedClasses","join","id","cellId","className","onClick","clicked","bind","value","Component","cellArray","i","totalCols","row","Math","floor","col","val","App","RowCellsIncrement","index","state","cells","rowIndexArray","forEach","arrLength","length","setState","console","log","ColCellsIncrement","clickedCell","colIndexArray","resetCells","j","updatedCells","checkFibHandler","fib1","fib2","fib3","fib4","fib5","random","setTimeout","StylingHandler","table","map","key","clickCellHandler","Aux","src","logo","alt","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a1ecf9f0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell\":\"Cell_cell__2Y63x\",\"changed\":\"Cell_changed__2cCb7\",\"reset\":\"Cell_reset__PZxY8\"};","module.exports = __webpack_public_path__ + \"static/media/favicon.c28024f7.ico\";","import React, { Component } from 'react';\n\nimport Aux from './hocs/Aux/Aux';\nimport logo from './favicon.ico';\nimport './App.css';\nimport Cell from './components/Cell/Cell';\n\n\n// design the size of grid table\nconst totalRows = 50\nconst totalCols = totalRows;\nconst n = totalCols * totalRows;\nconst cellArray = [];\n\n\n// populate cells array with cell elements\n// format: { cellid: nr, row: nr, col: nr, val: nr, changed: bl, reset: bl }\nfor (var i = 0; i < n; i++) cellArray.push(\n  {\n    cellId: i,\n    row: Math.floor(i/totalRows), \n    col:  i - Math.floor(i/totalRows)*totalCols,\n    val: 0,\n    changed: false,\n    reset: false,\n  });\n \nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      cells: cellArray,\n    }\n  }\n\n\n  componentDidUpdate() {\n    console.log('[app.js] updated ' + Math.random())\n    this.checkFibHandler();\n  }\n\n\n\n  clickCellHandler(index) {\n    this.RowCellsIncrement(index);\n    setTimeout(() => { this.ColCellsIncrement(index) }, 0);  \n    setTimeout(() => {this.StylingHandler()}, 2000);  // after 2 sec reset styling\n    \n  }\n\n\n  StylingHandler() {                                  // reset styling state elements for all cells.\n    const updatedCells = [...this.state.cells]; \n    \n    for (var i = 0; i < updatedCells.length; i++) {   \n      updatedCells[i].changed = false;   \n      updatedCells[i].reset = false;\n    }\n    this.setState({ cells: updatedCells });\n    console.log('stylingHandler has run');\n  }\n\n\n// to increment all cells in same row\nRowCellsIncrement = (index) => {\n  const cellArray = [...this.state.cells];\n  const row = this.state.cells[index].row;        // = selected rownr.\n  let rowIndexArray = [];\n\n  const findRowIndex = (cell, index) => {\n    if (cell.row === row) {\n      rowIndexArray.push(index)\n    }; \n  };\n\n  cellArray.forEach(findRowIndex);              // create array of indexes of cells with the same rownr.\n\n  const arrLength = rowIndexArray.length - 1;   // forloop length\n\n  for (var i = rowIndexArray[0]; i <= rowIndexArray[arrLength]; i++) {\n    const cell = { ...this.state.cells[i] };     //extract cell state items at i to rowIndexArray[last]\n    cell.val = this.state.cells[i].val + 1;      // update cell elements\n    cell.changed = true;\n    cellArray[i] = cell;                \n  }\n\n  this.setState({ cells: cellArray }) \n  console.log('here are the row cell ids');\n  console.log(rowIndexArray);                     // expected output: [0 to 49] or [50 to 99] etc.\n}\n\n  \n  \n\n// to increment all cells in same col\nColCellsIncrement = (index) => {\n  const cellArray = [...this.state.cells];\n  const col = this.state.cells[index].col;        // = selected colnr..\n  const clickedCell = index;                      // = selected cellId.\n  let colIndexArray = [];\n\n  const findColIndexes = (cell, index) => {\n    if (cell.cellId !== clickedCell) {            // exclude clicked cell to avoid double (row & col) increment\n      if (cell.col === col) {\n        colIndexArray.push(index)\n      }; \n    };\n  };\n\n  cellArray.forEach(findColIndexes);              // create array of indexes of cells with the same colnr.\n\n  for (var i = 0; i < colIndexArray.length; i++) {\n    let col = colIndexArray[i];\n    const cell = { ...this.state.cells[col] };     //extract cell state items at i to rowIndexArray[last]\n    cell.val = this.state.cells[col].val + 1;      // update cell elements\n    cell.changed = true;\n    cellArray[col] = cell;                \n  }\n  this.setState({ cells: cellArray });\n  console.log('and here are the col cell ids');\n  console.log(colIndexArray);                      // expected output: [0 9 19...] or [51 61 71...] etc.\n}\n\n  \n  /// do a fibonacci check in the rows ///\n  // step 1 : create a forloop through cells array\n  // step 2 : create vars of cell.val from cell i to i+5 \n  // step 3 : compare sum of var 1 and var 2 to var 3 -- if TRUE >> else next forloop\n  // step 4 : compare sum of var 2 and var 3 to var 4 -- if TRUE >> else next forloop\n  // step 5 : compare sum of var 3 and var 4 to var 5 -- if TRUE >> else next forloop\n  // step 6 : reset cells.val of cell i tp i+5 to 0\n\n    \n  // to reset value of 5 consecutive cells starting at j\n  resetCells = (j) => {\n    const updatedCells = [...this.state.cells];\n    for (var i = j; i < j + 5; i++) {\n      const cell = { ...this.state.cells[i] };       //extract cell state items at i to i+4\n      cell.val = 0;                                 // update indexed cell state items\n      cell.changed = false;\n      cell.reset = true;\n      updatedCells[i] = cell;                \n    }\n    this.setState({ cells: updatedCells }) \n  }\n\n  // to check for fibonacci(5) series in the state.cells array.\n  checkFibHandler = () => {\n    const cellArray = this.state.cells;\n    for (var i = 0; i < cellArray.length-4; i++) {\n      const fib1 = cellArray[i].val;                   // select 5 consecutive values out of cellArray\n      const fib2 = cellArray[i + 1].val;\n      const fib3 = cellArray[i + 2].val;\n      const fib4 = cellArray[i + 3].val;\n      const fib5 = cellArray[i + 4].val;\n      \n      if ((fib1 + fib2) === fib3 && fib2 !== 0) {      // 1st fibonacci check: true > do 2nd check | false: go to next cell in forloop.\n        if (fib2 + fib3 === fib4) {\n          if (fib3 + fib4 === fib5) {\n            console.log('fib 5! reset these cells!');\n            this.resetCells(i)                          // if fibonacci 5 series is true > do resetCells() starting at cell i \n          }\n        }\n      }\n    }\n  }\n\n\n\n\n  render() {\n    let table = null;\n    table = this.state.cells.map((cell, index) => {\n      return (\n        <Cell\n          key={cell.cellId}\n          id={cell.cellId}\n          value={cell.val}\n          changed={cell.changed}\n          reset={cell.reset}\n          clicked={this.clickCellHandler.bind(this, index)}\n          />\n        )\n      }\n    )\n\n    return (\n      <Aux>\n        <div className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h2>A fibonacci finder</h2>\n        </div>\n\n        <div className=\"App-content\">\n          <div>rumber of rows: {totalRows}</div>\n          <div>rumber of columns: {totalCols}</div>\n          <div>rumber of cells: {n}</div>\n          {/* <button\n          onClick={() => this.StylingHandler(this)} >reset styling</button> */}\n          <div className=\"App-table\">\n            {table}\n          </div>\n        </div>        \n     </Aux>\n    );\n  }\n}\n\nexport default App;","// NTS: react not imported because no JSX present.\nconst aux = (props) => props.children;\n\nexport default aux;","import React, { Component  } from 'react';\nimport classes from './Cell.module.scss';\n\n\nclass Cell extends Component {\n   \n  render() {   \n    if (this.props.changed) {\n      this.cellClass.push(classes.changed);\n      this.styleUpdated = true;\n    } \n    else if (this.props.reset) {\n      this.cellClass.push(classes.reset);\n      this.styleUpdated = true;\n    } else \n      this.cellClass = [classes.cell]\n    \n    this.assignedClasses = this.cellClass.join(' ');\n\n    return (\n      <div\n        id={this.props.cellId}\n        className={this.assignedClasses}\n        onClick={this.props.clicked.bind(this)}\n      >\n        <p>{this.props.value}</p>\n      </div>\n    )\n  }\n}\n\nexport default Cell; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}